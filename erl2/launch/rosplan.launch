<?xml version="1.0"?>
<launch>
	
   <!-- arguments -->
<arg name="domain_path" default="$(find erl2)/common/domain.pddl" />
<arg name="problem_path" default="$(find erl2)/common/problem.pddl" />
<arg name="autom_gen_problem_path" default="$(find erl2)/common/new_problem.pddl" />
<arg name="use_problem_topic" default="true" />
<!-- planner will produce output plan and write to this location -->
<arg name="data_path" default="$(find rosplan_demos)/common/" />  
  <!-- command to run the planner -->
  <arg name="planner_command" default="timeout 10 $(find rosplan_planning_system)/common/bin/popf DOMAIN PROBLEM" />
    <!-- interface to the planning system -->
  <arg name="planner_interface" default="popf_planner_interface" />

  <!-- knowledge base -->
  <node name="rosplan_knowledge_base" pkg="rosplan_knowledge_base" type="knowledgeBase" respawn="false" output="screen">
    <param name="domain_path" value="$(arg domain_path)" />
    <param name="problem_path" value="$(arg problem_path)" />
    <!-- conditional planning flags -->
    <param name="use_unknowns" value="false" />
  </node>


  <!-- problem generation -->
  <include file="$(find rosplan_planning_system)/launch/includes/problem_interface.launch">
    <arg name="knowledge_base"   value="rosplan_knowledge_base" />
    <arg name="domain_path"      value="$(arg domain_path)" />
    <!-- problem_path: pddl problem will be automatically generated and placed in this location -->
    <arg name="problem_path"     value="$(arg autom_gen_problem_path)" />
    <arg name="problem_topic"    value="problem_instance" />
  </include>
  
  
  <!-- planner interface -->
  <include file="$(find rosplan_planning_system)/launch/includes/planner_interface.launch">
    <arg name="use_problem_topic"    value="$(arg use_problem_topic)" />
    <arg name="problem_topic"        value="/rosplan_problem_interface/problem_instance" />
    <arg name="planner_topic"        value="planner_output" />
    <arg name="domain_path"          value="$(arg domain_path)" />
    <arg name="data_path"            value="$(arg data_path)" />
    <arg name="planner_command"      value="$(arg planner_command)" />
    <arg name="planner_interface"    value="$(arg planner_interface)" />
  </include>
  
  <!-- parser-->
  <node name="rosplan_parsing_interface" pkg="rosplan_planning_system" type="pddl_simple_plan_parser" respawn="false" >
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="planner_topic" value="/rosplan_planner_interface/planner_output" />
<param name="plan_topic" value="complete_plan" />
</node>
<!-- dispatcher-->
<node name="rosplan_plan_dispatcher" pkg="rosplan_planning_system" type="pddl_simple_plan_dispatcher" respawn="false" >
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="plan_topic" value="/rosplan_parsing_interface/complete_plan" />
<param name="action_dispatch_topic" value="action_dispatch" />
<param name="action_feedback_topic" value="action_feedback" />
</node>


<!-- real actions for go_to_next_point-->
<node name="rosplan_interface_go_to_next_point" pkg="erl2" type="go_to_next_point" respawn="false" output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="pddl_action_name" value="go_to_next_point" />
<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>

<!-- real actions for CollectHint-->
<node name="rosplan_interface_collect_hint" pkg="erl2" type="collect_hint" respawn="false" output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="pddl_action_name" value="collect_hint" />
<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>


<!-- real actions for go_to_oracle-->
<node name="rosplan_interface_go_to_oracle" pkg="erl2" type="go_to_oracle" respawn="false" output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="pddl_action_name" value="go_to_oracle" />
<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>


<!-- real actions for leave_oracle-->
<node name="rosplan_interface_leave_oracle" pkg="erl2" type="leave_oracle" respawn="false" output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="pddl_action_name" value="leave_oracle" />
<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>


<!-- real actions for complete_query-->
<node name="rosplan_interface_complete_query" pkg="erl2" type="complete_query" respawn="false" output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="pddl_action_name" value="complete_query" />
<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>


<!-- real actions for solution_query-->
<node name="rosplan_interface_solution_query" pkg="erl2" type="solution_query" respawn="false" output="screen">
<param name="knowledge_base" value="rosplan_knowledge_base" />
<param name="pddl_action_name" value="solution_query" />
<param name="action_dispatch_topic" value="/rosplan_plan_dispatcher/action_dispatch" />
<param name="action_feedback_topic" value="/rosplan_plan_dispatcher/action_feedback" />
</node>


<!-- ARMOR -->
<node pkg="armor" type="execute" name="armor_service" args="it.emarolab.armor.ARMORMainService"/>
<!-- nodes -->
<node name="gotopoint"  pkg="erl2" type="go_to_point.py"/>
<!--node name="myhint"  pkg="erl2" type="myhint.py" output="screen"/--> 
<node name="plan_update"  pkg="erl2" type="plan_update.py"/>
</launch>
